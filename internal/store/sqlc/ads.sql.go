// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ads.sql

package sqlc

import (
	"context"
	"time"
)

const createAd = `-- name: CreateAd :one
INSERT INTO ads (author_id, title, text, image_url, price)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, author_id, title, text, image_url, price, created_at
`

type CreateAdParams struct {
	AuthorID int32
	Title    string
	Text     string
	ImageUrl string
	Price    string
}

func (q *Queries) CreateAd(ctx context.Context, arg CreateAdParams) (Ad, error) {
	row := q.db.QueryRowContext(ctx, createAd,
		arg.AuthorID,
		arg.Title,
		arg.Text,
		arg.ImageUrl,
		arg.Price,
	)
	var i Ad
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Title,
		&i.Text,
		&i.ImageUrl,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const listAdsByDateDesc = `-- name: ListAdsByDateDesc :many
SELECT a.id, a.author_id, u.username AS author_username,
       a.title, a.text, a.image_url, a.price, a.created_at
FROM ads a
JOIN users u ON u.id = a.author_id
WHERE a.price BETWEEN $1 AND $2
ORDER BY a.created_at DESC
LIMIT $3 OFFSET $4
`

type ListAdsByDateDescParams struct {
	Price   string
	Price_2 string
	Limit   int32
	Offset  int32
}

type ListAdsByDateDescRow struct {
	ID             int32
	AuthorID       int32
	AuthorUsername string
	Title          string
	Text           string
	ImageUrl       string
	Price          string
	CreatedAt      time.Time
}

func (q *Queries) ListAdsByDateDesc(ctx context.Context, arg ListAdsByDateDescParams) ([]ListAdsByDateDescRow, error) {
	rows, err := q.db.QueryContext(ctx, listAdsByDateDesc,
		arg.Price,
		arg.Price_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAdsByDateDescRow
	for rows.Next() {
		var i ListAdsByDateDescRow
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.AuthorUsername,
			&i.Title,
			&i.Text,
			&i.ImageUrl,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
